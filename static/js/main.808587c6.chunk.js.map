{"version":3,"sources":["hooks/useSocket.ts","App.tsx","reportWebVitals.js","index.tsx"],"names":["socket","io","App","canvasCtxRef","React","useRef","useState","drawing","setDrawing","x","y","prevPos","setPrevPos","paint","ctx","brushStart","brushEnd","beginPath","moveTo","lineTo","stroke","on","console","log","emit","data","current","lineStart","lineEnd","useEffect","lineWidth","lineJoin","lineCap","strokeStyle","className","width","height","onMouseMove","e","start","end","nativeEvent","offsetX","offsetY","onMouseDown","onMouseUp","ref","canvas","getContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAOMA,EAASC,aAFT,iDCkGSC,MA5Ff,WACE,IAAMC,EAAeC,IAAMC,OAAwC,MADtD,EAEiBC,oBAAS,GAF1B,mBAENC,EAFM,KAEGC,EAFH,OAGiBF,mBAAc,CAAEG,EAAG,EAAGC,EAAG,IAH1C,mBAGNC,EAHM,KAGGC,EAHH,KAOLZ,EDTD,CAAEA,UCSDA,OAEFa,EAAQ,SAACC,EAAKC,EAAiBC,GACnCF,EAAIG,YACJH,EAAII,OAAOH,EAAWN,EAAGM,EAAWL,GACpCI,EAAIK,OAAOH,EAASP,EAAGO,EAASN,GAChCI,EAAIM,UA6DN,OA1DApB,EAAOqB,GAAG,WAAW,WACnBC,QAAQC,IAAI,oBACZvB,EAAOwB,KAAK,WAAY,YAG1BxB,EAAOqB,GAAG,WAAW,SAACI,GACpBH,QAAQC,IAAIE,GACZ,IAAMX,EAAMX,EAAauB,QACtBZ,GACDD,EAAMC,EAAKW,EAAKE,UAAWF,EAAKG,YAKpCC,qBAAU,WACR,IAAMf,EAAMX,EAAauB,QACrBZ,IACFA,EAAIgB,UAAY,EAChBhB,EAAIiB,SAAW,QACfjB,EAAIkB,QAAU,QACdlB,EAAImB,YAAc,aAEnB,IAqCD,sBAAKC,UAAU,MAAf,0BAEE,wBACEC,MAAK,UAAK,IAAL,MACLC,OAAM,UAAK,IAAL,MACNC,YApCkB,SACtBC,GAEA,GAAI/B,GAAWJ,EAAauB,QAAS,CAEnC,IAAMa,EAAQ,CAAC9B,EAAGE,EAAQF,EAAGC,EAAGC,EAAQD,GAClC8B,EAAM,CACV/B,EAAG6B,EAAEG,YAAYC,QACjBhC,EAAG4B,EAAEG,YAAYE,SAEnB9B,EAAMV,EAAauB,QAASa,EAAQC,GAdtBb,EAeLY,EAfqBX,EAedY,EAdlBxC,EAAOwB,KAAK,UAAW,CAACG,YAAWC,YAejChB,EAAW,CAAEH,EAAG+B,EAAI/B,EAAGC,EAAG8B,EAAI9B,IAhBjB,IAACiB,EAAgBC,GAyC5BgB,YAjBkB,SACtBN,GAEA1B,EAAW,CAAEH,EAAG6B,EAAEG,YAAYC,QAAShC,EAAG4B,EAAEG,YAAYE,UACxDnC,GAAW,IAcPqC,UAtBgB,WACpBrC,GAAW,IAsBPsC,IAAK,SAACC,GACAA,IAAQ5C,EAAauB,QAAUqB,EAAOC,WAAW,QAEvDd,UAAW,eCrFJe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.808587c6.chunk.js","sourcesContent":["import { io } from \"socket.io-client\";\n\nconst endpoint =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:3000\"\n    : \"https://whispering-bayou-18693.herokuapp.com/\";\n\nconst socket = io(endpoint);\nexport const useSocket = () => {\n  return { socket };\n};\n","\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { useSocket } from \"./hooks/useSocket\";\n\ntype Pos = {\n  x: number\n  y: number\n}\n\n\nfunction App() {\n  const canvasCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\n  const [drawing, setDrawing] = useState(false);\n  const [prevPos, setPrevPos] = useState<Pos>({ x: 0, y: 0 });\n\n  const scale = 3\n  \n  const { socket } = useSocket() \n  \n  const paint = (ctx, brushStart: Pos, brushEnd: Pos) => {\n    ctx.beginPath();\n    ctx.moveTo(brushStart.x, brushStart.y);\n    ctx.lineTo(brushEnd.x, brushEnd.y);\n    ctx.stroke();\n  };\n\n  socket.on('connect', () => {\n    console.log('client connected')\n    socket.emit('joinRoom', 'room1')\n  })\n\n  socket.on('drawing', (data) => {\n    console.log(data)\n    const ctx = canvasCtxRef.current\n    if(ctx) {\n      paint(ctx, data.lineStart, data.lineEnd)\n    }\n    \n  })\n\n  useEffect(() => {\n    const ctx = canvasCtxRef.current;\n    if (ctx) {\n      ctx.lineWidth = 3;\n      ctx.lineJoin = \"round\";\n      ctx.lineCap = \"round\";\n      ctx.strokeStyle = \"#00CC99\";\n    }\n  }, []);\n\n  const emitLine = (lineStart: Pos, lineEnd: Pos) => {\n    socket.emit('drawing', {lineStart, lineEnd})\n  }\n\n  const handleMouseMove = (\n    e: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n  ) => {\n    if (drawing && canvasCtxRef.current) {\n    \n      const start = {x: prevPos.x, y: prevPos.y}\n      const end = {\n        x: e.nativeEvent.offsetX,\n        y: e.nativeEvent.offsetY,\n      }\n      paint(canvasCtxRef.current, start,  end);\n      emitLine(start, end)\n      setPrevPos({ x: end.x, y: end.y });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setDrawing(false);\n  };\n\n  const handleMouseDown = (\n    e: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n  ) => {\n    setPrevPos({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\n    setDrawing(true);\n  };\n\n\n  \n\n  return (\n    <div className=\"App\">\n      Draw stuff :)\n      <canvas\n        width={`${300 * scale}px`}\n        height={`${150 * scale}px`}\n        onMouseMove={handleMouseMove}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        ref={(canvas) => {\n          if (canvas) canvasCtxRef.current = canvas.getContext(\"2d\");\n        }}\n        className={\"canvas\"}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}