{"version":3,"sources":["hooks/useApplicationState.tsx","hooks/useSocket.ts","components/button/button.tsx","components/canvas/canvas.tsx","utils/gameCodeGen.tsx","components/modal/modal.tsx","components/newGameModal/newGame.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["defaultState","clientRole","inviteCode","appStateContext","React","AppStateProvider","children","appState","Provider","value","useAppState","state","setState","joinAsHost","oldState","joinAsGuest","leaveGame","console","log","process","socket","io","on","useSocket","Button","onclick","className","onClick","e","stopPropagation","Canvas","canvasCtxRef","useRef","useState","drawing","setDrawing","x","y","prevPos","setPrevPos","paint","ctx","brushStart","brushEnd","beginPath","moveTo","lineTo","stroke","data","current","lineStart","lineEnd","useEffect","lineWidth","lineJoin","lineCap","strokeStyle","clearCanvas","context","clearRect","alert","width","height","onMouseMove","start","end","nativeEvent","offsetX","offsetY","emit","onMouseDown","onMouseUp","ref","canvas","getContext","CHARS","genRandChar","val","Math","floor","random","length","Modal","NewGameModel","show","showRoomNotFound","setRoomNotFound","joinKey","setJoinKey","room","inviteKey","Array","fill","map","_","i","a","charPos","needsDash","join","style","color","onChange","target","type","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c64c58d6.chunk.js","sourcesContent":["import * as React from \"react\";\n\ntype ClientRole =  \"host\" | \"guest\" | null;\ntype AppState = {\n  clientRole: ClientRole\n  inviteCode: string;\n};\n\nconst defaultState: AppState = {\n  clientRole: null,\n  inviteCode: \"\",\n};\n\nconst appStateContext = React.createContext<\n  [AppState, React.Dispatch<React.SetStateAction<AppState>>]\n>([defaultState, () => {}]);\n\nexport const AppStateProvider: React.FC = ({ children }) => {\n  const appState = React.useState(defaultState);\n  const { Provider } = appStateContext;\n  return <Provider value={appState}>{children}</Provider>;\n};\n\n\nexport const useAppState = () => {\n    const [state, setState] = React.useContext(appStateContext)\n    return {\n        state,\n        joinAsHost: (inviteCode: string) => setState(oldState => ({...oldState, clientRole: 'host', inviteCode,})),\n        joinAsGuest: () => setState(oldState => ({...oldState, clientRole: 'guest' })),\n        leaveGame: () => {setState(defaultState)}\n    }\n}","import { io } from \"socket.io-client\";\nconsole.log(process.env.REACT_APP_API_ROOT!)\nconst socket = io(process.env.REACT_APP_API_ROOT!);\n\nsocket.on('connect', () => {\n  console.log('client connected')\n})\n\nexport const useSocket = () => {\n\n  return {\n    socket \n  };\n};\n","import * as React from \"react\";\nimport \"./button.css\";\n\ntype ButtonProps = {\n  onclick: () => void;\n};\n\nexport const Button: React.FC<ButtonProps> = ({ children, onclick }) => {\n    const handleClick = (e :React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.stopPropagation()\n        onclick()\n    }\n    return (\n        <button className={\"button\"} onClick={handleClick}>{children}</button>\n      );    \n} ","\nimport React, { useEffect, useState } from \"react\";\nimport { useAppState } from \"../../hooks/useApplicationState\";\nimport { useSocket } from \"../../hooks/useSocket\";\nimport { Button } from \"../button/button\";\nimport './canvas.css'\n\ntype Pos = {\n  x: number\n  y: number\n}\n\nexport const Canvas = () => {\n  const canvasCtxRef = React.useRef<CanvasRenderingContext2D | null>(null);\n  const [drawing, setDrawing] = useState(false);\n  const [prevPos, setPrevPos] = useState<Pos>({ x: 0, y: 0 });\n\n  const scale = 3\n  const canvasWidth = 300 * scale\n  const canvasHeight = 150 * scale\n  \n  const { socket } = useSocket() \n  const {leaveGame} = useAppState()\n  \n  const paint = (ctx, brushStart: Pos, brushEnd: Pos) => {\n    ctx.beginPath();\n    ctx.moveTo(brushStart.x, brushStart.y);\n    ctx.lineTo(brushEnd.x, brushEnd.y);\n    ctx.stroke();\n  };\n\n  socket.on('drawing', (data) => {\n    console.log(data)\n    const ctx = canvasCtxRef.current\n    if(ctx) {\n      paint(ctx, data.lineStart, data.lineEnd)\n    }\n  })\n\n  useEffect(() => {\n    const ctx = canvasCtxRef.current;\n    if (ctx) {\n      ctx.lineWidth = 3;\n      ctx.lineJoin = \"round\";\n      ctx.lineCap = \"round\";\n      ctx.strokeStyle = \"#00CC99\";\n    }\n  }, []);\n\n  const emitLine = (lineStart: Pos, lineEnd: Pos) => {\n    socket.emit('drawing', {lineStart, lineEnd})\n  }\n\n  const handleMouseMove = (\n    e: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n  ) => {\n    if (drawing && canvasCtxRef.current) {\n    \n      const start = {x: prevPos.x, y: prevPos.y}\n      const end = {\n        x: e.nativeEvent.offsetX,\n        y: e.nativeEvent.offsetY,\n      }\n      paint(canvasCtxRef.current, start,  end);\n      emitLine(start, end)\n      setPrevPos({ x: end.x, y: end.y });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setDrawing(false);\n  };\n\n  const handleMouseDown = (\n    e: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n  ) => {\n    setPrevPos({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\n    setDrawing(true);\n  };\n\n  const clearCanvas = () => {\n    const context = canvasCtxRef.current\n    if(context) {\n      context.clearRect(0, 0, canvasWidth, canvasHeight);\n    }\n  }\n\n  socket.on('clearCanvas', () => {\n    clearCanvas()\n  })\n\n  socket.on('hostLeft', () => {\n    alert('The host left')\n    leaveGame()\n  })\n\n  const handleClear = () => {\n    clearCanvas()\n    socket.emit('clearCanvas')\n  }\n\n  const handleExit = () => {\n    socket.emit('leaveGame')\n    leaveGame()\n  }\n\n\n  return (\n    <div className=\"canvas\">\n      <canvas\n        width={`${canvasWidth}px`}\n        height={`${canvasHeight}px`}\n        onMouseMove={handleMouseMove}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        ref={(canvas) => {\n          if (canvas) canvasCtxRef.current = canvas.getContext(\"2d\");\n        }}\n        className={\"canvas\"}\n      />\n      <div className=\"canvas-buttons\">\n      <Button onclick={handleClear}>Clear</Button>\n      <Button onclick={handleExit}>Exit</Button>\n      </div>\n    </div>\n  );\n}\n","const CHARS = \"123456789abcdefghijklmnopqrstuvwxyz\";\nconst KEY_LENGTH = 9;\n\nexport const generateInviteKey = () =>\n  new Array(KEY_LENGTH)\n    .fill(null)\n    .map((_, i, a) => {\n      const charPos = i + 1;\n      const needsDash = charPos !== a.length && charPos % 3 === 0;\n      return `${genRandChar()}${needsDash ? \"-\" : \"\"}`;\n    })\n    .join(\"\");\n\nconst genRandChar = () => {\n  const val = Math.floor(Math.random() * CHARS.length);\n  return CHARS[val];\n};\n","import * as React from \"react\";\nimport './modal.css'\nexport const Modal: React.FC = ({ children }) => {\n  return <div className=\"modal\">{children}</div>;\n};\n","import React, { useState } from \"react\";\nimport { useAppState } from \"../../hooks/useApplicationState\";\nimport { useSocket } from \"../../hooks/useSocket\";\nimport { generateInviteKey } from \"../../utils/gameCodeGen\";\nimport { Button } from \"../button/button\";\nimport { Modal } from \"../modal/modal\";\n\nimport \"./newGame.css\";\n\ntype NewGameProps = {\n  show: boolean;\n};\n\nexport const NewGameModel: React.FC<NewGameProps> = ({ show }) => {\n  const { socket } = useSocket();\n  const { joinAsHost, joinAsGuest } = useAppState();\n  const [showRoomNotFound, setRoomNotFound] = useState(false);\n\n  const [joinKey, setJoinKey] = useState(\"\");\n\n  const handleStartGame = () => {\n    const inviteKey = generateInviteKey();\n    socket.emit(\"createRoom\", inviteKey);\n    console.log(\"start clicked\");\n  };\n\n  const handleJoinGame = () => {\n    console.log(\"join clicked\");\n    socket.emit(\"joinGame\", joinKey);\n  };\n\n  const handleJoinKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setJoinKey(e.target.value);\n  };\n\n  socket.on(\"confirmGameCreated\", (room: string) => {\n    console.log(\"room created\");\n    joinAsHost(room);\n  });\n\n  socket.on(\"confirmGameJoined\", () => {\n    console.log(\"room joined\");\n    setRoomNotFound(false);\n    joinAsGuest();\n  });\n\n  socket.on(\"gameNotFound\", () => {\n    console.log(\"room joined\");\n    setRoomNotFound(true);\n  });\n\n  return show ? (\n    <Modal>\n      <div className=\"new-game\">\n        <Button onclick={handleStartGame}>Start new game</Button>\n        Join existing game\n        {showRoomNotFound && (\n          <span style={{ color: \"red\" }}>Room not Found</span>\n        )}\n        <input onChange={handleJoinKeyChange} type=\"text\" placeholder=\"paste invite code...\"/>\n        <Button onclick={handleJoinGame}>Join existing game</Button>\n        \n      </div>\n    </Modal>\n  ) : null;\n};\n","\nimport React from \"react\";\nimport \"./App.css\";\nimport { Canvas } from \"./components/canvas/canvas\";\nimport { NewGameModel } from \"./components/newGameModal/newGame\";\nimport \"./App.css\";\nimport { useAppState } from \"./hooks/useApplicationState\";\n\n\nfunction App() {\n  \n  const { state: { clientRole , inviteCode} } = useAppState()\n  console.log(clientRole)\n  return (\n    <div className=\"App\">\n    \n     <h3> Draw stuff... :)</h3>\n  {inviteCode && <h4> Invite code: {inviteCode}</h4>}\n     <Canvas/>\n     <NewGameModel show={clientRole === null}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AppStateProvider } from './hooks/useApplicationState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppStateProvider>\n    <App />\n    </AppStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}